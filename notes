http://www.cs.cornell.edu/~bindel/class/cs5220-s10/slides/lec06.pdf

"pseudo-random number generation"
explains the issues with random numbers and parallel

http://stackoverflow.com/questions/30168252/c-with-openmp-thread-safe-random-numbers
re-seeding doesn't work.

----------------
new code, without -03, t=36s
 
Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 89.22     10.62    10.62 33858264     0.00     0.00  site_energy_new_element(int, std::string, int)
  3.19     11.00     0.38                             estimate_beta_c()
  2.86     11.34     0.34  5642980     0.00     0.00  site_energy_new(int)
  1.72     11.54     0.21 33858264     0.00     0.00  fix_index(int, std::string, int)
  1.09     11.67     0.13  2822077     0.00     0.00  flip_Uz(int, double, double)
  0.76     11.76     0.09  2823531     0.00     0.00  flip_Ux(int, double, double)
  0.50     11.82     0.06  2821490     0.00     0.00  flip_R(int, double, double, double)
  0.34     11.86     0.04  2817382     0.00     0.00  flip_Uy(int, double, double)
  0.34     11.90     0.04        4    10.00   276.14  thermalization()
  0.00     11.90     0.00      400     0.00     0.00  orderparameter_n()
  0.00     11.90     0.00        1     0.00     0.00  _GLOBAL__sub_I_R

old code, without -O3, t=5s

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 41.13      0.44     0.44  5642980     0.00     0.00  site_energy_old(int)
 26.17      0.72     0.28                             estimate_beta_c()
 13.09      0.86     0.14  2822077     0.00     0.00  flip_Uz(int, double, double)
  7.48      0.94     0.08  2823531     0.00     0.00  flip_Ux(int, double, double)
  7.48      1.02     0.08  2817382     0.00     0.00  flip_Uy(int, double, double)
  2.80      1.05     0.03        4     7.50    25.10  thermalization()
  1.87      1.07     0.02  2821490     0.00     0.00  flip_R(int, double, double, double)
  0.00      1.07     0.00      400     0.00     0.00  orderparameter_n()
  0.00      1.07     0.00        1     0.00     0.00  _GLOBAL__sub_I_R

I.e. cblas is too fast.